#!/usr/bin/env node

function help() {
    console.log([
        'Usage:',
        '  commonplace <command>',
        '',
        'Commands:',
        '  install      Run this command to instantiate commonplace.',
        '  update       This command will update commonplace modules.',
        '  langpacks    This command will generate langpacks out of `.po` files.',
        '  clean        Run this to clean up static files, templates and langpacks.'
    ].join('\n'));
}

process.title = 'commonplace';

var argv = process.argv.slice(2);
if (!argv.length) {
    console.error('Not enough arguments passed.');
    help();
    process.exit();
}

var child_process = require('child_process');
var fs = require('fs');
var path = require('path');

var info = require('../lib/info');
var utils = require('../lib/utils');
var srcdir = require('../lib/info.js').src_dir()

function copy_dir(src, dest) {
    // `dest` is expected to be the path to a directory.
    // `src` is expected to be the path to a directory.

    if (!fs.existsSync(src)) {
        console.error('Source directory "' + src + '" doesn\'t exist.');
        return;
    }
    function mkdirRecursive(dir) {
        var parent = path.resolve(dir, '../');
        if (!fs.existsSync(parent)) {
            mkdirRecursive(parent);
        }
        fs.mkdirSync(dir);
    }
    if (!fs.existsSync(dest)) {
        mkdirRecursive(dest);
    }

    if (src.substr(src.length - 1) !== '/') {
        src += '/';
    }

    if (dest.substr(dest.length - 1) !== '/') {
        dest += '/';
    }

    var files_copied = 0;

    utils.globSync(src, '*', function(err, files) {
        files.forEach(function(file) {
            var interim_path = file.substr(src.length);
            var dest_file = dest + interim_path;

            var dir = path.dirname(dest_file);
            if (!fs.existsSync(dir)) {
                console.log(dir);
                mkdirRecursive(dir);
            }
            files_copied++;
            fs.readFile(file, function(err, data) {
                if (err) {return;}
                fs.writeFile(dest_file, data, function(err) {
                    if (err) {
                        console.warn('Error copying ' + interim_path, err);
                    }
                });
            });
        });
    });

    console.log('Copied ' + files_copied + ' files.');

}

function rmdirRecursive(path) {
    // Recursive directory deletion.
    if (!fs.existsSync(path)) {
        console.warn('Specified path does not exist: ' + path);
        return;
    }
    var list = fs.readdirSync(path);
    list.forEach(function(file) {
        file = path + '/' + file;
        var stat = fs.statSync(file);
        if (stat && stat.isDirectory()) {
            rmdir(file);
        } else {
            fs.unlinkSync(file);
        }
    });
    fs.rmdir(path);
    console.log('Removed: ' + path);
}

function removeFile(path) {
    if (!fs.existsSync(path)) {
        console.warn('Cannot remove non-existing file: ' + path);
        return;
    }
    fs.unlink(path, function() {
        if (err) {
            console.warn('Cannot delete: ' + path);
        } else {
            console.log('Removed: ' + path);
        }
    });
}

var process_file = require('../lib/generate_langpacks.js').process_file;

function cleanup() {
    var targets = ['_tmp',
        'src/templates.js',
        'src/media/css/include.css',
        'src/media/js/include.js',
        'src/locales/'
    ];
    targets.forEach(function(path) {
        if (path.substr(1).indexOf('.') !== -1) {
            removeFile(path);
        } else {
            rmdirRecursive(path);
        }
    });

    utils.glob('src/media/css/', '.styl.css', function(err, filepaths) {
        if (err) {
            console.warn('`src/media/css` does not exist. Skipping.');
            return;
        }
        filepaths.forEach(function(filepath) {
            removeFile(filepath);
        });
    });
}

function generate_langpacks() {
    var langpacks_path = src_path + '/locales/';
    if (!fs.existsSync(langpacks_path)) {
        fs.mkdirSync(langpacks_path);
    }
    utils.glob('locale', '.po', function(err, filepaths) {
        if (err) {
            console.warn('Oops. Maybe `locale/` does not exist.\n' +
                'Failed to generate langpacks.');
            return;
        }
        filepaths.forEach(function(filepath) {
            var path_regex = /locale\/([^\/]+?)\/LC_MESSAGES\/(.+?).po/;
            var match = path_regex.exec(filepath);
            process_file(filepath, match[1], langpacks_path + match[1] + '.js');
        });
    });
}

switch (argv[0]) {
    case 'install':
        var commonplace_src = path.resolve(__dirname, '../src');
        var local_src = path.resolve(process.cwd(), 'src/');
        console.log('Installing Commonplace...');
        console.log('Source:       ' + commonplace_src);
        console.log('Destination:  ' + local_src);
        
        var existing_manifest = path.resolve(local_src, '.commonplace');
        if (fs.existsSync(existing_manifest)) {
            var version = JSON.parse(fs.readFileSync(existing_manifest)).version;
            if (varsion !== info.version()) {
                console.error('Commonplace installation already exists from different version.');
                console.error('You must delete or update the existing installation.');
                console.error('Installation aborted.');
                process.exist();
            } else {
                console.warn('Existing commonplace installation found. Overwriting.');
            }
        }
        
        copy_dir(commonplace_src, local_src);
        
        // Write a commonplace manifest.
        fs.writeFile(
            path.resolve(local_src, '.commonplace'),
            JSON.stringify({version: info.version()}),
            function(err) {
                if (err) {console.error('Error creating commonplace manifest.', err);}
            }
        );

        console.log('Initializing distributable files...');
        utils.glob(local_src, '.dist', function(err, files) {
            files.forEach(function(file) {
                if (fs.existsSync(file)) {
                    console.warn('Distributable file exists: ' + file);
                    return;
                }
                fs.readFile(file, function(err, data) {
                    fs.writeFile(file.substr(file.length - 5), data, function(err) {
                        if (err) {
                            console.warn('Error initializing ' + file, err);
                        }
                    });
                });
            });
            console.log('Done.');
        });
        break;
    case 'update':
        // git clone git://github.com/mozilla/commonplace.git /tmp/commonplace
        break;
    case 'help':
        help();
        break;
    case 'clean':
        cleanup();
        break;
    case 'langpacks':
        generate_langpacks();
        break;
    default:
        console.error('Unrecognized command "' + argv[0] + '"');
        help();
}
